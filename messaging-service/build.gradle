plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.7'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.foodcourt'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'com.twilio.sdk:twilio:8.30.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.12"
}

tasks.named('jacocoTestReport', JacocoReport) {
	dependsOn tasks.named('test')

	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				"**/dto/**",
				"**/config/**",
				"**/*MapperImpl.class"
		])
	}))
}

tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
	dependsOn tasks.named('jacocoTestReport')
	violationRules {
		rule {
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.8
			}
		}
	}
}

tasks.named('build') {
	dependsOn tasks.named('jacocoTestCoverageVerification')
}
